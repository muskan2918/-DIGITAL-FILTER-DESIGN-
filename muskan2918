module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,     // 8-bit signed input
    output reg signed [15:0] y_out // 16-bit signed output
);

    parameter N = 5; // Number of taps

    reg signed [7:0] coeffs[0:N-1] = '{1, 2, 3, 2, 1}; // coefficients
    reg signed [7:0] shift_reg[0:N-1]; // input shift register

    integer i;
    reg signed [15:0] acc;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < N; i = i + 1)
                shift_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift inputs
            for (i = N-1; i > 0; i = i - 1)
                shift_reg[i] <= shift_reg[i-1];
            shift_reg[0] <= x_in;

            // Multiply and accumulate
            acc = 0;
            for (i = 0; i < N; i = i + 1)
                acc = acc + shift_reg[i] * coeffs[i];

            y_out <= acc;
        end
    end
endmodule
module fir_filter_tb;
    reg clk, reset;
    reg signed [7:0] x_in;
    wire signed [15:0] y_out;

    fir_filter uut (
        .clk(clk),
        .reset(reset),
        .x_in(x_in),
        .y_out(y_out)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    initial begin
        reset = 1; x_in = 0;
        #15 reset = 0;

        // Input sequence
        x_in = 1; #10;
        x_in = 2; #10;
        x_in = 3; #10;
        x_in = 4; #10;
        x_in = 5; #10;
        x_in = 0; #50;
        
        $finish;
    end

    initial begin
        $monitor("Time=%0t x_in=%d y_out=%d", $time, x_in, y_out);
    end
endmodule
